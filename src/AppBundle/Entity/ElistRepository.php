<?php

namespace AppBundle\Entity;

/**
 * ElistRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ElistRepository extends \Doctrine\ORM\EntityRepository {

    public function findByIdCampaignId($id, $limit, $offset) {
        $qb = $this->createQueryBuilder('c')
                ->select('c')
                ->where('c.campaign = :id')
                ->addOrderBy('c.createdAt')
                ->setMaxResults($limit)
                ->setFirstResult($offset)
                ->setParameters(array('id' => $id));

        try {
            return $qb->getQuery()->getResult();
        } catch (\Doctrine\ORM\NoResultException $e) {
            return null;
        }
    }
    
    public function findByCampaignIdCount($id) {
        $qb = $this->createQueryBuilder('c')
                ->select('count(c)')
                ->where('c.campaign = :id')
                ->setParameters(array('id' => $id));

        try {
            return $qb->getQuery()->getSingleScalarResult();
        } catch (\Doctrine\ORM\NoResultException $e) {
            return null;
        }
    }
    
    public function searchLeadsByName($name) {

        $qb = $this->createQueryBuilder('n');
        $result = $qb->select('n')
                ->where($qb->expr()->like('n.customerName', $qb->expr()->literal('%' . $name . '%')))
                ->getQuery()
                ->getResult();
        return $result;
    }
    
    public function searchLeadsByEmail($email) {

        $qb = $this->createQueryBuilder('n');
        $result = $qb->select('n')
                ->where($qb->expr()->like('n.email', $qb->expr()->literal('%' . $email . '%')))
                ->getQuery()
                ->getResult();
        return $result;
    }
    
    public function findFirstElistId($campid) {
        $qb = $this->createQueryBuilder('c')
                ->select('MIN(c.id)')
                ->where('c.campaign = :campid')
                ->setParameters(array('campid' => $campid));

        try {
            return $qb->getQuery()->getSingleScalarResult();
        } catch (\Doctrine\ORM\NoResultException $e) {
            return null;
        }
    }
    
    public function findLastElistId($campid) {
        $qb = $this->createQueryBuilder('c')
                ->select('MAX(c.id)')
                ->where('c.campaign = :campid')
                ->setParameters(array('campid' => $campid));

        try {
            return $qb->getQuery()->getSingleScalarResult();
        } catch (\Doctrine\ORM\NoResultException $e) {
            return null;
        }
    }
    
    public function findrange($campid, $limit, $offset) {
        $qb = $this->createQueryBuilder('c')
                ->select('c')
                ->where('c.campaign = :campid')
                ->andWhere('c.active = :active')
                ->addOrderBy('c.id')
                ->setMaxResults($limit)
                ->setFirstResult($offset)
                ->setParameters(array('campid' => $campid, 'active' => 0));

        try {
            return $qb->getQuery()->getResult();
        } catch (\Doctrine\ORM\NoResultException $e) {
            return null;
        }
    }
    
    public function findallbycampid($campid) {
        $qb = $this->createQueryBuilder('c')
                ->select('c')
                ->where('c.campaign = :campid')
                ->addOrderBy('c.id')
                ->setParameters(array('campid' => $campid));

        try {
            return $qb->getQuery()->getResult();
        } catch (\Doctrine\ORM\NoResultException $e) {
            return null;
        }
    }
    
    public function updateElistActive($campId) {
        $qb = $this->createQueryBuilder('u');
            $q = $qb->update('AppBundle:Elist', 'u')
                    ->set('u.active', $qb->expr()->literal(0))
                    ->where('u.campaign = :campid')
                    ->setParameters(array('campid' => $campId))
                    ->getQuery();
            $p = $q->execute();
    }
    
    

}
