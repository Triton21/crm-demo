<?php

namespace AppBundle\Entity;

use FOS\ElasticaBundle\Repository;

/**
 * MaininboxRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MaininboxRepository extends \Doctrine\ORM\EntityRepository {

    public function findmyemails($id, $offset, $itemperpage, $folder) {

        $qb = $this->createQueryBuilder('c')
                ->select('c')
                ->addOrderBy('c.id', 'DESC')
                ->where('c.settings = :id', 'c.folder = :folder')
                ->setParameters(array('id' => $id, 'folder' => $folder))
                ->setFirstResult($offset)
                ->setMaxResults($itemperpage);

        return $qb->getQuery()
                        ->getResult();
    }

    public function findmystars($id, $allstarsarray, $offset, $itemperpage) {
        $qb = $this->createQueryBuilder('c')
                ->select('c')
                ->addOrderBy('c.id', 'DESC')
                ->setFirstResult($offset)
                ->setMaxResults($itemperpage);

        foreach ($allstarsarray as $i => $allst) {
            $qb->orWhere("c.id = :id$i")
                    ->setParameter("id$i", $allst['inboxid']);
        }
        return $qb->getQuery()
                        ->getResult();
    }

    public function findmysent($id, $offset, $itemperpage) {

        $qb = $this->createQueryBuilder('c')
                ->select('c')
                ->addOrderBy('c.id', 'DESC')
                ->where('c.settid = :id', 'c.folder = :folder')
                ->setParameters(array('id' => $id, 'folder' => 'Sent'))
                ->setFirstResult($offset)
                ->setMaxResults($itemperpage);

        return $qb->getQuery()
                        ->getResult();
    }

    public function findconversation($email, $offset, $itemperpage) {
        $fields = array('c.id', 'c.fromemail', 'c.maildate', 'c.content', 'c.toemail', 'c.subject', 'c.username');
        $qb = $this->createQueryBuilder('c')
                ->select($fields)
                ->addOrderBy('c.maildate', 'DESC')
                ->where('c.fromemail = :email')
                ->orWhere('c.toemail = :email')
                ->setParameters(array('email' => $email))
                ->setFirstResult($offset)
                ->setMaxResults($itemperpage);

        return $qb->getQuery()
                        ->getResult();
    }

    public function countconversation($email) {
        $qb = $this->createQueryBuilder('c')
                ->select('count(c)')
                ->addOrderBy('c.maildate', 'DESC')
                ->where('c.fromemail = :email')
                ->orWhere('c.toemail = :email')
                ->setParameters(array('email' => $email));
        //->setFirstResult($offset)
        //->setMaxResults($itemperpage);

        return $qb->getQuery()
                        ->getSingleScalarResult();
    }

    public function findFirstFocusAndLimit($id, $focusId, $itemperpage) {

        $qb = $this->createQueryBuilder('c')
                ->select('c')
                ->addOrderBy('c.id', 'DESC')
                ->where('c.settings = :id')
                ->andWhere('c.id <= :focusId')
                ->setParameters(array('id' => $id, 'focusId' => $focusId))
                //->setFirstResult($offset)
                ->setMaxResults($itemperpage);

        return $qb->getQuery()
                        ->getResult();
    }

    public function countall($id) {

        $qb = $this->createQueryBuilder('c')
                ->select('count(c)')
                ->where('c.settings = :id')
                ->setParameters(array('id' => $id));

        return $qb->getQuery()
                        ->getSingleScalarResult();
    }

    public function countallbyfolder($id, $folder) {

        $qb = $this->createQueryBuilder('c')
                ->select('count(c)')
                ->where('c.settings = :id', 'c.folder = :folder')
                ->setParameters(array('id' => $id, 'folder' => $folder));

        return $qb->getQuery()
                        ->getSingleScalarResult();
    }
    
    public function countallsent($id) {

        $qb = $this->createQueryBuilder('c')
                ->select('count(c)')
                ->where('c.settid = :id', 'c.folder = :folder')
                ->setParameters(array('id' => $id, 'folder' => 'Sent'));

        return $qb->getQuery()
                        ->getSingleScalarResult();
    }

    public function countrest($id, $focusId) {

        $qb = $this->createQueryBuilder('c')
                ->select('count(c)')
                ->where('c.settings = :id')
                ->andWhere('c.id >= :focusId')
                ->setParameters(array('id' => $id, 'focusId' => $focusId));

        return $qb->getQuery()
                        ->getSingleScalarResult();
    }

    public function countunseen($id) {

        $qb = $this->createQueryBuilder('c')
                ->select('count(c)')
                ->where('c.settings = :id')
                ->andWhere('c.seen = :seen')
                ->setParameters(array('id' => $id, 'seen' => 0));

        return $qb->getQuery()
                        ->getSingleScalarResult();
    }

    public function countunseenbyFolder($id, $folder) {

        $qb = $this->createQueryBuilder('c')
                ->select('count(c)')
                ->where('c.settings = :id', 'c.folder = :folder')
                ->andWhere('c.seen = :seen')
                ->setParameters(array('id' => $id, 'seen' => 0, 'folder' => $folder));

        return $qb->getQuery()
                        ->getSingleScalarResult();
    }

    public function searchemail($id, $offset, $limit, $mysearchemail) {

        $qb = $this->createQueryBuilder('n')
                ->select('n')
                ->addOrderBy('n.id', 'DESC')
                ->where('n.settings = :id', 'n.fromemail = :mysearchemail')
                ->setParameters(array('id' => $id, 'mysearchemail' => $mysearchemail))
                ->setFirstResult($offset)
                ->setMaxResults($limit);

        return $qb->getQuery()
                        ->getResult();
    }

    public function searchemailbyfolder($id, $offset, $limit, $mysearchemail, $folder) {

        $qb = $this->createQueryBuilder('n')
                ->select('n')
                ->addOrderBy('n.id', 'DESC')
                ->where('n.settings = :id', 'n.fromemail = :mysearchemail', 'n.folder = :folder')
                ->setParameters(array('id' => $id, 'mysearchemail' => $mysearchemail, 'folder' => $folder))
                ->setFirstResult($offset)
                ->setMaxResults($limit);

        return $qb->getQuery()
                        ->getResult();
    }

    public function searchsentemailbyfolder($id, $offset, $limit, $mysearchemail, $folder) {

        $qb = $this->createQueryBuilder('n')
                ->select('n')
                ->addOrderBy('n.id', 'DESC')
                ->where('n.settid = :id', 'n.toemail = :mysearchemail', 'n.folder = :folder')
                ->setParameters(array('id' => $id, 'mysearchemail' => $mysearchemail, 'folder' => $folder))
                ->setFirstResult($offset)
                ->setMaxResults($limit);

        return $qb->getQuery()
                        ->getResult();
    }

    public function countbyemailbyfolder($id, $mysearchemail, $folder) {

        $qb = $this->createQueryBuilder('n')
                ->select('count(n)')
                ->addOrderBy('n.id', 'DESC')
                ->where('n.settings = :id', 'n.fromemail = :mysearchemail', 'n.folder = :folder')
                ->setParameters(array('id' => $id, 'mysearchemail' => $mysearchemail, 'folder' => $folder));

        return $qb->getQuery()
                        ->getSingleScalarResult();
    }

    public function countbyemailbysent($id, $mysearchemail, $folder) {

        $qb = $this->createQueryBuilder('n')
                ->select('count(n)')
                ->addOrderBy('n.id', 'DESC')
                ->where('n.settid = :id', 'n.toemail = :mysearchemail', 'n.folder = :folder')
                ->setParameters(array('id' => $id, 'mysearchemail' => $mysearchemail, 'folder' => $folder));

        return $qb->getQuery()
                        ->getSingleScalarResult();
    }

    public function searchform($id, $offset, $limit, $mysearchemail) {

        $qb = $this->createQueryBuilder('n')
                ->select('n')
                ->where('n.settings = :id', 'n.fromemail = :mysearchemail')
                ->setParameters(array('id' => $id, 'mysearchemail' => $mysearchemail))
                ->setFirstResult($offset)
                ->setMaxResults($limit);

        return $qb->getQuery()
                        ->getResult();
    }

    public function searchemailtotalcount($id, $mysearchemail) {

        $qb = $this->createQueryBuilder('n')
                ->select('count(n)')
                ->where('n.settings = :id', 'n.fromemail = :mysearchemail')
                ->setParameters(array('id' => $id, 'mysearchemail' => $mysearchemail));

        return $qb->getQuery()
                        ->getSingleScalarResult();
    }

    public function searchformtotalcount($id, $mysearchemail) {

        $qb = $this->createQueryBuilder('n')
                ->select('count(n)')
                ->where('n.settings = :id', 'n.fromemail = :mysearchemail')
                ->setParameters(array('id' => $id, 'mysearchemail' => $mysearchemail));

        return $qb->getQuery()
                        ->getSingleScalarResult();
    }

    public function findOneEmail($id, $searchdata) {

        $qb = $this->createQueryBuilder('c')
                ->select('c')
                //->addOrderBy('c.id', 'DESC')
                ->where('c.settings = :id', 'c.fromemail = :searchdata')
                ->setParameters(array('id' => $id, 'searchdata' => $searchdata))
                ->setMaxResults(1);

        return $qb->getQuery()
                        ->getResult();
    }

    public function findOneSentEmail($id, $searchdata) {

        $qb = $this->createQueryBuilder('c')
                ->select('c')
                //->addOrderBy('c.id', 'DESC')
                ->where('c.settid = :id', 'c.toemail = :searchdata')
                ->setParameters(array('id' => $id, 'searchdata' => $searchdata))
                ->setMaxResults(1);

        return $qb->getQuery()
                        ->getResult();
    }

    public function findOneName($id, $searchdata) {

        $qb = $this->createQueryBuilder('c')
                ->select('c')
                //->addOrderBy('c.id', 'DESC')
                ->where('c.settings = :id', 'c.fromname = :searchdata')
                ->setParameters(array('id' => $id, 'searchdata' => $searchdata))
                ->setMaxResults(1);

        return $qb->getQuery()
                        ->getResult();
    }

    public function findOneSentName($id, $searchdata) {

        $qb = $this->createQueryBuilder('c')
                ->select('c')
                //->addOrderBy('c.id', 'DESC')
                ->where('c.settid = :id', 'c.toname = :searchdata')
                ->setParameters(array('id' => $id, 'searchdata' => $searchdata))
                ->setMaxResults(1);

        return $qb->getQuery()
                        ->getResult();
    }

    public function findnullentities($id) {

        $qb = $this->createQueryBuilder('c')
                ->select('c')
                //->addOrderBy('c.id', 'DESC')
                ->where('c.settid = :id', 'c.fromemail is NULL')
                ->andWhere('c.folder = :folder')
                ->setParameters(array('id' => $id, 'folder' => 'Sent'));

        return $qb->getQuery()
                        ->getResult();
    }

}
