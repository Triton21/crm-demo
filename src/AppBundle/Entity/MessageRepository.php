<?php

namespace AppBundle\Entity;

/**
 * MessageRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MessageRepository extends \Doctrine\ORM\EntityRepository {

    public function findAllByName($offset, $itemperpage, $name) {

        $qb = $this->createQueryBuilder('c')
                ->select('c')
                ->where('c.username = :username')
                ->addOrderBy('c.id', 'DESC')
                ->setParameters(array('username' => $name))
                ->setFirstResult($offset)
                ->setMaxResults($itemperpage)
        ;
        return $qb->getQuery()
                        ->getResult();
    }
    
    public function findAllByAssign($offset, $itemperpage, $name) {

        $qb = $this->createQueryBuilder('c')
                ->select('c')
                ->where('c.assign = :assign')
                ->addOrderBy('c.id', 'DESC')
                ->setParameters(array('assign' => $name))
                ->setFirstResult($offset)
                ->setMaxResults($itemperpage)
        ;
        return $qb->getQuery()
                        ->getResult();
    }
    public function countAllByName($name) {

        $qb = $this->createQueryBuilder('c')
                ->select('count(c)')
                ->where('c.username = :username')
                ->setParameters(array('username' => $name))
        ;
        return $qb->getQuery()
                        ->getSingleScalarResult();
    }
    
    public function countAllByAssign($name) {

        $qb = $this->createQueryBuilder('c')
                ->select('count(c)')
                ->where('c.assign = :username')
                ->setParameters(array('username' => $name))
        ;
        return $qb->getQuery()
                        ->getSingleScalarResult();
    }
    
    public function countUnread($name) {

        $qb = $this->createQueryBuilder('c')
                ->select('count(c)')
                ->where('c.unread is NULL', 'c.assign = :assign')
                ->setParameters(array('assign' => $name));

        return $qb->getQuery()
                        ->getSingleScalarResult();
    }

}
