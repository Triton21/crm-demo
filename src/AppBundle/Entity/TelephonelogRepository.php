<?php

namespace AppBundle\Entity;

/**
 * TelephonelogRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TelephonelogRepository extends \Doctrine\ORM\EntityRepository {

    public function findLogbyPage($offset, $itemperpage, $namefilter) {
        if ($namefilter === 'all') {
            $qb = $this->createQueryBuilder('c')
                    ->select('c')
                    ->addOrderBy('c.id')
                    ->setFirstResult($offset)
                    ->setMaxResults($itemperpage);

            return $qb->getQuery()
                            ->getResult();
        } else {
            $qb = $this->createQueryBuilder('c')
                    ->select('c')
                    ->where('c.assign = :assign')
                    ->addOrderBy('c.id')
                    ->setParameters(array('assign' => $namefilter))
                    ->setFirstResult($offset)
                    ->setMaxResults($itemperpage)
            ;
            return $qb->getQuery()
                            ->getResult();
        }
    }

    public function findtaskbyPage($offset, $itemperpage, $namefilter) {
        if ($namefilter === 'all') {
            $qb = $this->createQueryBuilder('c')
                    ->select('c')
                    ->where('c.inorout = :task')
                    ->addOrderBy('c.id', 'DESC')
                    ->setParameters(array('task' => 'new task'))
                    ->setFirstResult($offset)
                    ->setMaxResults($itemperpage);

            return $qb->getQuery()
                            ->getResult();
        } else {
            $qb = $this->createQueryBuilder('c')
                    ->select('c')
                    ->where('c.inorout = :task')
                    ->andWhere('c.assign = :assign')
                    ->addOrderBy('c.id', 'DESC')
                    ->setParameters(array('assign' => $namefilter, 'task' => 'new task'))
                    ->setFirstResult($offset)
                    ->setMaxResults($itemperpage)
            ;
            return $qb->getQuery()
                            ->getResult();
        }
    }

    public function findmyunsolved($solved, $name) {

        $qb = $this->createQueryBuilder('c')
                ->select('c')
                ->where('c.solved = :solved', 'c.reassign = :reassign')
                ->addOrderBy('c.id')
                ->setParameters(array('solved' => $solved, 'reassign' => $name));

        return $qb->getQuery()
                        ->getResult();
    }

    public function findlastid() {

        $qb = $this->createQueryBuilder('c')
                ->select('c.id')
                ->addOrderBy('c.id', 'DESC')
                ->setMaxResults(1);

        return $qb->getQuery()
                        ->getSingleScalarResult();
    }
    
    public function findcommunication($customerName) {

        $qb = $this->createQueryBuilder('c')
                ->select('c')
                ->where('c.customerName = :customerName')
                ->addOrderBy('c.id', 'DESC')
                ->setParameters(array('customerName' => $customerName));

        return $qb->getQuery()
                        ->getResult();
    }

    public function countmyunsolved($solved, $name) {

        $qb = $this->createQueryBuilder('c')
                ->select('count(c)')
                ->where('c.solved = :solved', 'c.reassign = :reassign')
                ->addOrderBy('c.id')
                ->setParameters(array('solved' => $solved, 'reassign' => $name));

        return $qb->getQuery()
                        ->getSingleScalarResult();
    }

    public function findunsolved($solved) {

        $qb = $this->createQueryBuilder('c')
                ->select('c')
                ->where('c.solved = :solved')
                ->addOrderBy('c.id')
                ->setParameters(array('solved' => $solved));

        return $qb->getQuery()
                        ->getResult();
    }

    public function countallunsolved($solved) {

        $qb = $this->createQueryBuilder('c')
                ->select('count(c)')
                ->where('c.solved = :solved')
                ->addOrderBy('c.id')
                ->setParameters(array('solved' => $solved));

        return $qb->getQuery()
                        ->getSingleScalarResult();
    }

    public function findalert($solved) {

        $qb = $this->createQueryBuilder('c')
                ->select('c')
                ->where('c.solved = :solved', 'c.deadline <= :today')
                ->addOrderBy('c.id')
                ->setParameters(array('solved' => $solved, 'today' => new \DateTime()));

        return $qb->getQuery()
                        ->getResult();
    }

    public function findflagged($flag, $name) {

        $qb = $this->createQueryBuilder('c')
                ->select('c')
                ->where('c.flag = :flag', 'c.assign = :assign')
                ->addOrderBy('c.id')
                ->setParameters(array('flag' => $flag, 'assign' => $name));

        return $qb->getQuery()
                        ->getResult();
    }

    public function countflagged($flag) {

        $qb = $this->createQueryBuilder('c')
                ->select('count(c)')
                ->where('c.flag = :flag')
                ->addOrderBy('c.id')
                ->setParameters(array('flag' => $flag));

        return $qb->getQuery()
                        ->getSingleScalarResult();
    }

    public function findreminder() {

        $qb = $this->createQueryBuilder('u')
                ->where('u.reminder <= :today')
                ->setParameters(array('today' => new \DateTime()));
        ;

        return $qb->getQuery()
                        ->getResult();
    }

    public function findallreminder() {

        $qb = $this->createQueryBuilder('u')
                ->where('u.reminder IS NOT NULL');

        return $qb->getQuery()
                        ->getResult();
    }

    public function countall() {

        $qb = $this->createQueryBuilder('c')
                ->select('count(c)');

        return $qb->getQuery()
                        ->getSingleScalarResult();
    }

    public function countallByName($namefilter) {
        if ($namefilter === 'all') {
            $qb = $this->createQueryBuilder('c')
                    ->select('count(c)');

            return $qb->getQuery()
                            ->getResult();
        } else {
            $qb = $this->createQueryBuilder('c')
                    ->select('count(c)')
                    ->where('c.assign = :assign')
                    ->setParameters(array('assign' => $namefilter));
            return $qb->getQuery()
                            ->getResult();
        }
    }

    public function countalltaskByName($namefilter) {
        if ($namefilter === 'all') {
            $qb = $this->createQueryBuilder('c')
                    ->select('count(c)')
                    ->where('c.inorout = :task')
                    ->setParameters(array('task' => 'new task'));

            return $qb->getQuery()
                            ->getResult();
        } else {
            $qb = $this->createQueryBuilder('c')
                    ->select('count(c)')
                    ->where('c.assign = :assign')
                    ->andWhere('c.inorout = :task')
                    ->setParameters(array('assign' => $namefilter, 'task' => 'new task'));
            return $qb->getQuery()
                            ->getResult();
        }
    }

    public function searchlogByName($name) {

        $qb = $this->createQueryBuilder('n');
        $result = $qb->select('n')
                ->where($qb->expr()->like('n.customerName', $qb->expr()->literal('%' . $name . '%')))
                ->getQuery()
                ->getResult();
        return $result;
    }

    public function searchlogByPhone($phone) {

        $qb = $this->createQueryBuilder('n');
        $result = $qb->select('n')
                ->where($qb->expr()->like('n.customerTel', $qb->expr()->literal('%' . $phone . '%')))
                ->getQuery()
                ->getResult();
        return $result;
    }

    public function searchlogByEmail($email) {

        $qb = $this->createQueryBuilder('n');
        $result = $qb->select('n')
                ->where($qb->expr()->like('n.customerEmail', $qb->expr()->literal('%' . $email . '%')))
                ->getQuery()
                ->getResult();
        return $result;
    }

}
